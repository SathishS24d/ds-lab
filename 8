import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn import datasets
from sklearn.metrics import accuracy_score, mean_squared_error
import matplotlib.pyplot as plt

# Load the diabetes dataset
diabetes = datasets.load_diabetes()

# Create a DataFrame
diabetes_df = pd.DataFrame(data=diabetes.data, columns=diabetes.feature_names)
diabetes_df['target'] = diabetes.target

# Split the data into features (X) and target variable (y)
X = diabetes_df[['age', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']]
y = diabetes_df['target']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Bivariate Analysis - Linear Regression
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

# Predictions on the test set
y_pred_linear = linear_model.predict(X_test)

# Evaluate linear regression model
mse_linear = mean_squared_error(y_test, y_pred_linear)
print("Mean Squared Error (Linear Regression):", mse_linear)

# Bivariate Analysis - Logistic Regression
# Create a binary target variable based on a threshold (e.g., median)
threshold = y.median()
binary_target = (y > threshold).astype(int)

# Split the data into training and testing sets for logistic regression
X_train_log, X_test_log, y_train_log, y_test_log = train_test_split(X, binary_target, test_size=0.2, random_state=42)

# Logistic Regression
logistic_model = LogisticRegression()
logistic_model.fit(X_train_log, y_train_log)

# Predictions on the test set
y_pred_logistic = logistic_model.predict(X_test_log)

# Evaluate logistic regression model
accuracy_logistic = accuracy_score(y_test_log, y_pred_logistic)
print("Accuracy (Logistic Regression):", accuracy_logistic)

# Plot a scatter plot for actual vs. predicted values (Linear Regression)
plt.scatter(y_test, y_pred_linear)
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("Linear Regression: Actual vs. Predicted")
plt.show()
